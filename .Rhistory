?hotdeck
??hotdeck
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
# Load the data
dat <- read.csv("wcgs.csv")
# Imputing cholesterol within domain
dat_imp <- hotdeck(
dat,
variable = "chol",
domain_var = c("smoke","dibpat"),
ord_var = c("age","bmi"))
# examine the imputed cholesterol value
dat_imp[is.na(dat$chol),"chol"]
# Imputing arcus within domain
dat_imp <- hotdeck(
dat_imp,
variable = "arcus",
domain_var = c("smoke","dibpat"),
ord_var = c("age","chol"))
# examine the imputed arcus value
dat_imp[is.na(dat$arcus),"arcus"]
set.seed(123)
# create train/test split
idx = createDataPartition(dat_imp$chd69, p=0.75, list=F)
train.chd69 = dat_imp[idx,]
test.chd69 = dat_imp[-idx,]
# Load the data
dat <- read.csv("Data/wcgs.csv")
write.csv(train.chd69, "Data/train.chd69.csv", row.names = F)
write.csv(test.chd69, "Data/test.chd69.csv", row.names = F)
rm(list=ls)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
library(kernlab)
library(klaR)
library(performanceEstimation)
library(DMwR)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
library(kernlab)
library(klaR)
library(performanceEstimation)
# Load the data
dat <- read.csv("train.chd69.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
library(kernlab)
library(klaR)
library(performanceEstimation)
# Load the data
dat <- read.csv("train.chd69.csv")
# Load the data
dat <- read.csv("Data/train.chd69.csv")
# Load the data
train.chd69 <- read.csv("Data/train.chd69.csv")
test.chd69 <- read.csv("Data/test.chd69.csv")
model <- glm(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus), data = train.chd69, family = binomial)
summary(model)
pred = predict(model, newdata = test.chd69, type="response")
y_test = test.chd69$chd69
y = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y, y_test)
y_test = test.chd69$chd69
y_hat = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
y_hat
y_test
View(test.chd69)
y_test = test.chd69$typchd69
y_hat = ifelse(pred>0.5, 1, 0)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(test.chd69$typchd69, pred, print.auc=T)
library(performanceEstimation)
library(pROC)
library(pROC)
# ROC
plot.roc(test.chd69$typchd69, pred, print.auc=T)
set.seed(123)
train_control = trainControl(method = "repeatedcv", number = 5, repeats = 5, savePred=T, classProb=T)
x = train.chd69[,c("age","bmi","lnsbp","dbp","chol","dibpat","smoke","arcus")]
y = train.chd69$chd69
# Fit the model
svm1 <- train(x,y,
method = "nb",
trControl = train_control,
preProcess = c("center","scale"))
#View the model
svm1
svm1$result
#accuracy:0.9184288
pred = predict(svm1, newdata = test.chd69, type="response")
pred = predict(svm1, newdata = test.chd69, type="prob")
y_test = test.chd69$chd69
y_hat = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
y_test = test.chd69$typchd69
y_hat = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
svm1
svm1$result
#accuracy:0.9184288
pred = predict(svm1, newdata = test.chd69, type="prob")
y_test = test.chd69$typchd69
y_hat = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
length(y_test)
length(y_hat)
pred
y_test = test.chd69$typchd69
y_hat = ifelse(pred[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
test.chd69$typchd69
table(test.chd69$chd69 )
y_test = ifelse(test.chd69$chd69 == "Yes", 1, 0)
table(y_tes)
table(y_test)
model <- glm(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus), data = train.chd69, family = binomial)
summary(model)
pred = predict(model, newdata = test.chd69, type="response")
y_test = ifelse(test.chd69$chd69 == "Yes", 1, 0)
y_hat = ifelse(pred>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(test.chd69$typchd69, pred, print.auc=T)
set.seed(123)
train_control = trainControl(method = "repeatedcv", number = 5, repeats = 5, savePred=T, classProb=T)
x = train.chd69[,c("age","bmi","lnsbp","dbp","chol","dibpat","smoke","arcus")]
y = train.chd69$chd69
# Fit the model
svm1 <- train(x,y,
method = "nb",
trControl = train_control,
preProcess = c("center","scale"))
#View the model
svm1
svm1$result
#accuracy:0.9184288
pred1 = predict(svm1, newdata = test.chd69, type="prob")
y_test = ifelse(test.chd69$chd69 == "Yes", 1, 0)
y_hat = ifelse(pred1[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(test.chd69$typchd69, pred1, print.auc=T)
pred1 = predict(svm1, newdata = test.chd69, type="prob")
y_test = ifelse(test.chd69$chd69 == "Yes", 1, 0)
pred1
y_hat = ifelse(pred1[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(test.chd69$typchd69, pred1, print.auc=T)
# ROC
plot.roc(as.numeric(test.chd69$chd69), pred1, print.auc=T)
# ROC
plot.roc(as.numeric(test.chd69$chd69), pred, print.auc=T)
test.chd69$chd69
as.numeric(test.chd69$chd69)
# ROC
plot.roc(y_test, pred1, print.auc=T)
y_test
# ROC
plot.roc(y_test, pred1, print.auc=T)
# ROC
plot.roc(as.numeric(y_test), pred1, print.auc=T)
# ROC
plot.roc(as.numeric(y_test), pred1, print.auc=T)
pred1
# ROC
plot.roc(as.numeric(y_test), pred1[,2], print.auc=T)
# ROC
plot.roc(y_test, pred, print.auc=T)
# Fit the model
svm3 <- train(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus), data = train.chd69, method = "svmPoly", trControl = train_control, preProcess = c("center","scale"))
# Fit the model
svm1 <- train(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus),
data = train.chd69,
method = "svmLinear",
trControl = train_control, preProcess = c("center","scale"))
# Print the best tuning parameter sigma and C that maximizes model accuracy
svm1
svm1$bestTune
#accuracy:0.9184288
res1 <- as_tibble(svm1$results[which.min(svm1$results[,2]),])
res1
svm1$results[,2]
# Fit the model
tunegrid=data.frame(C=c(0.1, 1, 10, 100))
svm2 <- train(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus), data = train.chd69, method = "svmLinear", trControl = train_control,  preProcess = c("center","scale"), tuneGrid = tunegrid) # might just use the default
#View the model
svm2
# Print the best tuning parameter sigma and C that maximizes model accuracy
svm1
svm1$bestTune
#accuracy:0.9184288
res1 <- as_tibble(svm1$results[which.min(svm1$results[,2]),])
res1
pred1 = predict(svm1, newdata = test.chd69, type="prob")
y_hat = ifelse(pred3[,2]>0.5, 1, 0)
y_hat = ifelse(pred3[,2]>0.5, 1, 0)
y_hat = ifelse(pred1[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(as.numeric(y_test), pred3[,2], print.auc=T)
# ROC
plot.roc(as.numeric(y_test), pred1[,2], print.auc=T)
# ROC
plot.roc(as.numeric(y_test), pred1[,2], print.auc=T)
# Print the best tuning parameter sigma and C that maximizes model accuracy
svm3
res3 <- as_tibble(svm3$results[which.min(svm3$results[,2]),])
res3
pred3 = predict(svm3, newdata = test.chd69, type="prob")
y_hat = ifelse(pred3[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(as.numeric(y_test), pred3[,2], print.auc=T)
# Fit the model
svm4 <- train(factor(chd69) ~ age+bmi+lnsbp+dbp+chol+factor(dibpat)+factor(smoke)+factor(arcus),
data = train.chd69,
method = "svmRadial",
trControl = train_control,
preProcess = c("center","scale"))
# Accuracy
df<-tibble(Model=c('SVM Linear','SVM Poly','SVM Radical'),
Accuracy=c(svm1$results[2][[1]],res3$Accuracy,res4$Accuracy))
# Print the best tuning parameter sigma and C that maximizes model accuracy
svm4$results
svm4$bestTune
#accuracy:0.9184286
res4 <- as_tibble(svm4$results[which.min(svm4$results[,2]),])
res4
pred4 = predict(svm4, newdata = test.chd69, type="prob")
y_hat = ifelse(pred4[,2]>0.5, 1, 0)
# Confusion matrix
table(y_hat, y_test)
# MCR
mean(y_hat!=y_test)
# ROC
plot.roc(as.numeric(y_test), pred3[,2], print.auc=T)
# Accuracy
df<-tibble(Model=c('SVM Linear','SVM Poly','SVM Radical'),
Accuracy=c(svm1$results[2][[1]],res3$Accuracy,res4$Accuracy))
df %>% arrange(Accuracy)
?arrange
library(dplyr)
df %>% arrange(Accuracy)
# Fit the model
nb <- train(x,y,
method = "awnb",
trControl = train_control,
preProcess = c("center","scale"))
# Fit the model
nb <- train(x,y,
method = "awnb",
trControl = train_control,
preProcess = c("center","scale"))
library(bnclassify)
install.packages("bnclassify")
library(bnclassify)
library(devstools)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages(usethis)
install.packages("usethis")
install.packages("usethis")
library(usethis)
install_github("vqv/bnclassify")
?install_github
library(remote)
install.packages("remote")
library(remote)
install_github("vqv/bnclassify")
remote::install_github("vqv/bnclassify")
devtools::install_github('bmihaljevic/bnclassify', build_vignettes = TRUE)
vignette('overview', package = 'bnclassify')
devtools::install_github('bmihaljevic/bnclassify')
library(bnclassify)
library(bnclassify)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/UGA/Courses/Fall 2023/MIST 7635 Machine Learning Bus Analytics/Group Projects")
library(caret)
library(tidyverse)
library(VIM)
library(kernlab)
library(klaR)
library(performanceEstimation)
library(pROC)
library(dplyr)
# Fit the model
nb <- train(x,y,
method = "awnb",
trControl = train_control,
preProcess = c("center","scale"))
#View the model
nb
nb$result
#View the model
nb$result
#View the model
nb$results
nb
rm(list=ls())
